name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Docker BuildKit optimizations for CI
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        dockerfile: Dockerfile
        target: development
        load: true
        tags: foreflight-dashboard:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Python/FastAPI tests with coverage
      run: |
        docker run --rm \
          foreflight-dashboard:dev \
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  api-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create .env file for testing
      run: |
        echo "FASTAPI_PORT=5051" > .env
        echo "REACT_DEV_PORT=3000" >> .env

    - name: Build and start application (cloud-compatible Dockerfile)
      run: |
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml up -d
        
    - name: Wait for application to be ready
      run: |
        echo "Waiting for FastAPI application to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:5051/health; do echo "Waiting..."; sleep 2; done'
        echo "Application is ready!"

    - name: Run API endpoint integration tests
      run: |
        echo "Running comprehensive API endpoint tests..."
        docker-compose -f docker-compose.yml exec -T foreflight-dashboard pytest tests/test_fastapi/ -v --tb=short

    - name: Stop application
      run: |
        echo "Stopping test application..."
        docker-compose -f docker-compose.yml down

  build:
    runs-on: ubuntu-latest
    needs: [test, api-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
